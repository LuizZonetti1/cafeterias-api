generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  address       String
  phone         String?
  email         String?
  logo_url      String?
  isActive      Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  categories    Category[]
  ingredients   Ingredient[]
  notifications Notification[]
  orders        Orders[]
  products      Product[]
  users         User[]
  warehouses    Warehouse[]

  @@map("restaurants")
}

model User {
  id           Int         @id @default(autoincrement())
  name         String
  email        String      @unique
  tipo_user    TipoUser
  password     String
  status_user  status_user
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  restaurantId Int?
  Orders       Orders[]
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
}

model Orders {
  id           Int          @id @default(autoincrement())
  userId       Int
  data_pedido  DateTime     @default(now())
  status_order status_order @default(PENDING)
  restaurantId Int
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  Item_Order   Item_Order[]
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
}

model Item_Order {
  id                    Int                     @id @default(autoincrement())
  orderId               Int
  productId             Int
  quantity              Int
  additional            String?
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  observations          String?
  order                 Orders                  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product               Product                 @relation(fields: [productId], references: [id])
  Item_Order_Additional Item_Order_Additional[]
}

model Item_Order_Additional {
  id           Int        @id @default(autoincrement())
  itemOrderId  Int
  ingredientId Int
  quantity     Float
  unit         Unit
  price        Float      @default(0)
  created_at   DateTime   @default(now())
  itemOrder    Item_Order @relation(fields: [itemOrderId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  categoryId   Int
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  image_url    String?
  restaurantId Int
  Item_Order   Item_Order[]
  Item_Product Item_Product[]
  category     Category       @relation(fields: [categoryId], references: [id])
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id])
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  image_url    String?
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  Product      Product[]

  @@unique([name, restaurantId])
}

model Item_Product {
  id           Int        @id @default(autoincrement())
  productId    Int
  ingredientId Int
  created_at   DateTime   @default(now())
  quantity     Float
  unit         Unit
  updated_at   DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, ingredientId])
}

model Warehouse {
  id           Int          @id @default(autoincrement())
  name         String
  description  String?
  restaurantId Int
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  Ingredients  Ingredient[]
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id])

  @@unique([name, restaurantId])
}

model Ingredient {
  id                    Int                     @id @default(autoincrement())
  name                  String
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  restaurantId          Int
  unit                  Unit                    @default(GRAMAS)
  warehouseId           Int
  restaurant            Restaurant              @relation(fields: [restaurantId], references: [id])
  warehouse             Warehouse               @relation(fields: [warehouseId], references: [id])
  Item_Product          Item_Product[]
  Notifications         Notification[]
  Stock                 Stock?
  Item_Order_Additional Item_Order_Additional[]

  @@unique([name, warehouseId])
}

model Stock {
  id               Int              @id @default(autoincrement())
  ingredientId     Int              @unique
  quantity_current Float            @default(0)
  updated_at       DateTime         @updatedAt
  last_updated_by  Int?
  quantity_minimum Float            @default(50)
  ingredient       Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  Stock_Movement   Stock_Movement[]
}

model Stock_Movement {
  id                  Int          @id @default(autoincrement())
  created_at          DateTime     @default(now())
  quantity            Float
  type                MovementType
  waste_reason        WasteReason?
  stockId             Int
  observation         String?
  responsible_user_id Int?
  Stock               Stock        @relation(fields: [stockId], references: [id], onDelete: Cascade)
}

model Notification {
  id           Int              @id @default(autoincrement())
  ingredientId Int
  type         NotificationType @default(LOW_STOCK)
  message      String
  is_read      Boolean          @default(false)
  restaurantId Int
  created_at   DateTime         @default(now())
  ingredient   Ingredient       @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  restaurant   Restaurant       @relation(fields: [restaurantId], references: [id])
}

enum TipoUser {
  ADMIN
  DEVELOPER
  GARCOM
  COZINHA
}

enum status_user {
  ACTIVE
  INACTIVE
}

enum status_order {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Unit {
  GRAMAS
  LITROS
  UNIDADES
  MILILITROS
}

enum MovementType {
  ENTRADA
  SAIDA_RECEITA
  SAIDA_PERDA
  SAIDA_PEDIDO
}

enum WasteReason {
  VENCIDO
  DETERIORADO
  CONTAMINADO
  QUEBRA
  DESPERDICIO_PREPARO
  OUTROS
}

enum NotificationType {
  LOW_STOCK
  OUT_OF_STOCK
}
