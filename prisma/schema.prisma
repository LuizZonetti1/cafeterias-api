// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== TABELA RESTAURANTE =====
model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  address     String
  phone       String?
  email       String?
  logo_url    String? // URL da logo/imagem
  isActive    Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  users       User[] // Usuários do restaurante
  categories  Category[] // Categorias do restaurante
  products    Product[] // Produtos do restaurante
  ingredients Ingredient[] // Ingredientes do restaurante
  orders      Orders[] // Pedidos do restaurante

  @@map("restaurants")
}

// tabela usuarios
model User {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  tipo_user   TipoUser
  password    String
  status_user status_user
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  restaurantId Int? // Opcional para DEVELOPER
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])

  Orders         Orders?
  Stock_Movement Stock_Movement[]
}

// tabela pedidos
model Orders {
  id           Int          @id @default(autoincrement())
  user         User         @relation(fields: [userId], references: [id])
  userId       Int          @unique
  data_pedido  DateTime     @default(now())
  status_order status_order
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  Item_Order Item_Order[]
}

// tabela itens do pedido
model Item_Order {
  id         Int      @id @default(autoincrement())
  order      Orders   @relation(fields: [orderId], references: [id])
  orderId    Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  additional String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// tabela produtos
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  image_url   String? // URL da imagem do produto
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Item_Order   Item_Order[]
  Item_Product Item_Product[]
}

// tabela categorias
model Category {
  id        Int     @id @default(autoincrement())
  name      String
  image_url String? // URL da imagem da categoria

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  Product    Product[]

  // Único por restaurante
  @@unique([name, restaurantId])
}

// tabela ingredientes dos produtos
model Item_Product {
  id           Int        @id @default(autoincrement())
  product      Product    @relation(fields: [productId], references: [id])
  productId    Int
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
}

// tabela ingredientes
model Ingredient {
  id               Int    @id @default(autoincrement())
  name             String
  quantity_general Float // Estoque máximo
  quantity_minimum Float  @default(10) // Estoque mínimo (alerta)
  unit             String @default("kg") // Unidade (kg, litros, unidades)

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  Item_Product Item_Product[]
  Stock        Stock[]
  Waste        Waste[]
}

// tabela estoque
model Stock {
  id               Int        @id @default(autoincrement())
  ingredient       Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId     Int
  quantity_current Float
  updated_at       DateTime   @updatedAt
}

// tabela movimentação de estoque
model Stock_Movement {
  id      Int   @id @default(autoincrement())
  waste   Waste @relation(fields: [wasteId], references: [id])
  wasteId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
}

// tabela desperdicio de ingredientes
model Waste {
  id             Int              @id @default(autoincrement())
  ingredient     Ingredient       @relation(fields: [ingredientId], references: [id])
  ingredientId   Int
  quantity       Float
  data           DateTime         @default(now())
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  Stock_Movement Stock_Movement[]
}

// enums
// tabela tipos de usuario
enum TipoUser {
  DEVELOPER // Pode cadastrar restaurantes
  ADMIN // Gerencia restaurante específico
  WAITER // Acesso aos produtos/cardápio
  KITCHEN // Remove estoque (perdas/preparo)
}

// tabela status do usuario
enum status_user {
  ACTIVE
  INACTIVE
}

// tabela status do pedido
enum status_order {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
